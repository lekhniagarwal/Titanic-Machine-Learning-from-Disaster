# Import the Pandas library
import pandas as pd

# Load the train and test datasets to create two DataFrames
train_url = "http://s3.amazonaws.com/assets.datacamp.com/course/Kaggle/train.csv"
train = pd.read_csv(train_url)

test_url = "http://s3.amazonaws.com/assets.datacamp.com/course/Kaggle/test.csv"
test = pd.read_csv(test_url)


# Import the Numpy library
import numpy as np

# Import 'tree' from scikit-learn library
from sklearn.ensemble import RandomForestClassifier





# Impute the Embarked variable
train["Embarked"] = train["Embarked"].fillna("S")
test["Embarked"] = test["Embarked"].fillna("S")

train['Family'] =  train["Parch"] + train["SibSp"]
train['Family'].loc[train['Family'] > 0] = 1
train['Family'].loc[train['Family'] == 0] = 0

test['Family'] =  test["Parch"] + test["SibSp"]
test['Family'].loc[test['Family'] > 0] = 1
test['Family'].loc[test['Family'] == 0] = 0

# drop Parch & SibSp
train.drop(['SibSp','Parch'], axis=1)
 test.drop(['SibSp','Parch'], axis=1)

train["Age"] = train["Age"].fillna(train["Age"].median())

test["Age"] = test["Age"].fillna(test["Age"].median())












def get_person(passenger):
    age,sex = passenger
    return 'child' if age < 16 else sex
    
train['Person'] = train[['Age','Sex']].apply(get_person,axis=1)
test['Person']    = test[['Age','Sex']].apply(get_person,axis=1)

# No need to use Sex column since we created Person column
train.drop(['Sex'],axis=1,inplace=True)
test.drop(['Sex'],axis=1,inplace=True)

# create dummy variables for Person column, & drop Male as it has the lowest average of survived passengers
person_dummies_titanic  = pd.get_dummies(train['Person'])
person_dummies_titanic.columns = ['Child','Female','Male']
person_dummies_titanic.drop(['Male'], axis=1, inplace=True)

person_dummies_test  = pd.get_dummies(test['Person'])
person_dummies_test.columns = ['Child','Female','Male']
person_dummies_test.drop(['Male'], axis=1, inplace=True)

train = train.join(person_dummies_titanic)
test    = test.join(person_dummies_test)


train.drop(['Person'],axis=1,inplace=True)
test.drop(['Person'],axis=1,inplace=True)






# create dummy variables for Pclass column, & drop class_3 as it has the lowest average of survived passengers
pclass_dummies_titanic  = pd.get_dummies(train['Pclass'])
pclass_dummies_titanic.columns = ['class_1','class_2','class_3']
pclass_dummies_titanic.drop(['class_3'], axis=1, inplace=True)

pclass_dummies_test  = pd.get_dummies(test['Pclass'])
pclass_dummies_test.columns = ['class_1','class_2','class_3']
pclass_dummies_test.drop(['class_3'], axis=1, inplace=True)

train = train.join(pclass_dummies_titanic)
test    = test.join(pclass_dummies_test)


train.drop(['Pclass'],axis=1,inplace=True)
test.drop(['Pclass'],axis=1,inplace=True)




embark_dummies_titanic  = pd.get_dummies(train['Embarked'])
embark_dummies_titanic.drop(['S'], axis=1, inplace=True)

embark_dummies_test  = pd.get_dummies(test['Embarked'])
embark_dummies_test.drop(['S'], axis=1, inplace=True)

train = train.join(embark_dummies_titanic)
test    = test.join(embark_dummies_test)

train.drop(['Embarked'], axis=1,inplace=True)
test.drop(['Embarked'], axis=1,inplace=True)








# Impute the missing value with the median
train["Fare"] = train["Fare"].fillna(train["Fare"].median())

# Create the target and features numpy arrays: target, features_one
target = train["Survived"].values
# Create a new array with the added features: features_two

features_forest = train[["class_1","class_2", "Age","Child","Female", "Fare", "Family" ,"C","Q"]].values


forest = RandomForestClassifier( n_estimators = 100)
my_forest = forest.fit(features_forest, target)






test["Fare"] = test["Fare"].fillna(test["Fare"].median())
# Extract the features from the test set: Pclass, Sex, Age, and Fare.

test_features = test[["class_1","class_2", "Age","Child","Female", "Fare", "Family", "C","Q"]].values
pred_forest = my_forest.predict(test_features)



# Create a data frame with two columns: PassengerId & Survived. Survived contains your predictions
PassengerId =np.array(test["PassengerId"]).astype(int)
my_solution = pd.DataFrame(pred_forest, PassengerId, columns = ["Survived"])





# Write your solution i.e my solution datframe to a csv file with the name third.csv and it will save in location given
my_solution.to_csv("C:/Users/hp/Desktop/exact-forest.csv", index_label = ["PassengerId"])





