# Import the Pandas library
import pandas as pd

# Load the train and test datasets to create two DataFrames
train_url = "http://s3.amazonaws.com/assets.datacamp.com/course/Kaggle/train.csv"
train = pd.read_csv(train_url)

test_url = "http://s3.amazonaws.com/assets.datacamp.com/course/Kaggle/test.csv"


# Import the Numpy library
import numpy as np


from sklearn import metrics
from sklearn.feature_selection import RFE
from sklearn.linear_model import LogisticRegression




train["Sex"][train["Sex"] == "male"] = 0
train["Sex"][train["Sex"] == "female"] = 1

# Impute the Embarked variable
train["Embarked"] = train["Embarked"].fillna("S")
test["Embarked"] = test["Embarked"].fillna("S")
# Convert the Embarked classes to integer form
train["Embarked"][train["Embarked"] == "S"] = 0
train["Embarked"][train["Embarked"] == "C"] = 1
train["Embarked"][train["Embarked"] == "Q"] = 2


train["Age"] = train["Age"].fillna(train["Age"].median())
# Impute the missing value with the median
#test.Fare[152] = test.Fare.median()
train["Fare"] = train["Fare"].fillna(train["Fare"].median())

# Create the target and features numpy arrays: target, features_one
target = train["Survived"].values
# Create a new array with the added features: features_two

features= train[["Pclass", "Age", "Sex", "Fare", "SibSp", "Parch", "Embarked"]].values
#Control overfitting by setting "max_depth" to 10 and "min_samples_split" to 5 : my_tree_two





model = LogisticRegression()


my_model = model.fit(features, target)




# setting values of test set

test["Sex"][test["Sex"] == "male"] = 0
test["Sex"][test["Sex"] == "female"] = 1
test["Embarked"][test["Embarked"] == "S"] = 0
test["Embarked"][test["Embarked"] == "C"] = 1
test["Embarked"][test["Embarked"] == "Q"] = 2
test["Age"] = test["Age"].fillna(test["Age"].median())
test["Fare"] = test["Fare"].fillna(test["Fare"].median())
# Extract the features from the test set: Pclass, Sex, Age, and Fare.

test_features = test[["Pclass", "Age", "Sex", "Fare", "SibSp", "Parch", "Embarked"]].values
prediction = my_model.predict(test_features)



# Create a data frame with two columns: PassengerId & Survived. Survived contains your predictions
PassengerId =np.array(test["PassengerId"]).astype(int)
my_solution = pd.DataFrame(prediction, PassengerId, columns = ["Survived"])



# Write your solution to a csv file with the name my_solution.csv
my_solution.to_csv("C:/Users/hp/Desktop/fourth.csv", index_label = ["PassengerId"])





